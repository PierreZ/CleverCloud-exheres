From 9a59aa1f721936701c2279e0b48af9a5daa881a5 Mon Sep 17 00:00:00 2001
From: Pierre Zemb <pierre.zemb@clever-cloud.com>
Date: Wed, 21 Jul 2021 11:50:15 +0200
Subject: [PATCH] add CMake's option on bindings

---
 cmake/FDBComponents.cmake | 73 ++++++++++++++++++++++++++-------------
 1 file changed, 49 insertions(+), 24 deletions(-)

diff --git a/cmake/FDBComponents.cmake b/cmake/FDBComponents.cmake
index ec26c07dd..673334e6f 100644
--- a/cmake/FDBComponents.cmake
+++ b/cmake/FDBComponents.cmake
@@ -45,36 +45,47 @@ endif()
 # Java Bindings
 ################################################################################
 
-set(WITH_JAVA OFF)
-find_package(JNI 1.8)
-find_package(Java 1.8 COMPONENTS Development)
-# leave FreeBSD JVM compat for later
-if(JNI_FOUND AND Java_FOUND AND Java_Development_FOUND AND NOT (CMAKE_SYSTEM_NAME STREQUAL "FreeBSD"))
-  set(WITH_JAVA ON)
-  include(UseJava)
-  enable_language(Java)
+option(BUILD_JAVA_BINDING "build java binding" ON)
+if(NOT BUILD_JAVA_BINDING)
+  set(WITH_JAVA OFF)
 else()
   set(WITH_JAVA OFF)
+  find_package(JNI 1.8)
+  find_package(Java 1.8 COMPONENTS Development)
+  # leave FreeBSD JVM compat for later
+  if(JNI_FOUND AND Java_FOUND AND Java_Development_FOUND AND NOT (CMAKE_SYSTEM_NAME STREQUAL "FreeBSD"))
+    set(WITH_JAVA ON)
+    include(UseJava)
+    enable_language(Java)
+  else()
+    set(WITH_JAVA OFF)
+  endif()
 endif()
 
 ################################################################################
 # Python Bindings
 ################################################################################
 
-find_package(Python COMPONENTS Interpreter)
-if(Python_Interpreter_FOUND)
-  set(WITH_PYTHON ON)
-else()
-  #message(FATAL_ERROR "Could not found a suitable python interpreter")
+option(BUILD_PYTHON_BINDING "build python binding" ON)
+if(NOT BUILD_PYTHON_BINDING)
   set(WITH_PYTHON OFF)
+else()
+  find_package(Python COMPONENTS Interpreter)
+  if(Python_Interpreter_FOUND)
+    set(WITH_PYTHON ON)
+  else()
+    #message(FATAL_ERROR "Could not found a suitable python interpreter")
+    set(WITH_PYTHON OFF)
+  endif()
 endif()
 
 ################################################################################
 # Pip
 ################################################################################
 
+option(BUILD_DOCUMENTATION "build documentation" ON)
 find_package(Python3 COMPONENTS Interpreter)
-if (Python3_Interpreter_FOUND)
+if (BUILD_DOCUMENTATION AND Python3_Interpreter_FOUND)
   set(WITH_DOCUMENTATION ON)
 else()
   set(WITH_DOCUMENTATION OFF)
@@ -84,23 +95,37 @@ endif()
 # GO
 ################################################################################
 
-find_program(GO_EXECUTABLE go)
-# building the go binaries is currently not supported on Windows
-if(GO_EXECUTABLE AND NOT WIN32)
-  set(WITH_GO ON)
-else()
+option(BUILD_GO_BINDING "build go binding" ON)
+if(NOT BUILD_GO_BINDING)
   set(WITH_GO OFF)
+else()
+  find_program(GO_EXECUTABLE go)
+  # building the go binaries is currently not supported on Windows
+  if(GO_EXECUTABLE AND NOT WIN32)
+    set(WITH_GO ON)
+  else()
+    set(WITH_GO OFF)
+  endif()
+  if (USE_SANITIZER)
+    # Disable building go for sanitizers, since _stacktester doesn't link properly
+    set(WITH_GO OFF)
+  endif()
 endif()
 
 ################################################################################
 # Ruby
 ################################################################################
 
-find_program(GEM_EXECUTABLE gem)
-set(WITH_RUBY OFF)
-if(GEM_EXECUTABLE)
-  set(GEM_COMMAND ${RUBY_EXECUTABLE} ${GEM_EXECUTABLE})
-  set(WITH_RUBY ON)
+option(BUILD_RUBY_BINDING "build ruby binding" ON)
+if(NOT BUILD_RUBY_BINDING)
+  set(WITH_RUBY OFF)
+else()
+  find_program(GEM_EXECUTABLE gem)
+  set(WITH_RUBY OFF)
+  if(GEM_EXECUTABLE)
+    set(GEM_COMMAND ${RUBY_EXECUTABLE} ${GEM_EXECUTABLE})
+    set(WITH_RUBY ON)
+  endif()
 endif()
 
 ################################################################################
-- 
2.32.0

